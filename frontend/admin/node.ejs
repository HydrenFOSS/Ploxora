<!DOCTYPE html>
<html lang="en">
<%- include('../components/head') %>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <body class="<%= theme.background %> <%= theme.textColor %> font-[Figtree] min-h-screen flex">

    <!-- Sidebar -->
    <%- include('../components/admin_sidebar.ejs') %>

      <!-- Main Content -->
      <div class="flex-1 flex flex-col">

        <!-- Navbar -->
        <%- include('../components/nav.ejs') %>

          <!-- Node Dashboard -->
          <main class="p-6 flex flex-col space-y-6">

            <!-- Node Info -->
            <div
              class="flex flex-col md:flex-row md:justify-between md:items-center <%= theme.buttonColor %> p-6 rounded-xl shadow-lg border border-[#2a2a2a]">
              <div class="flex flex-col md:flex-row md:items-center md:space-x-6 mb-4 md:mb-0 w-full md:w-auto">
                <h1 class="text-3xl font-bold text-white mb-2 md:mb-0">
                  <%= node.name %>
                </h1>
                <span class="text-gray-400 text-sm md:text-base">
                  ID: <%= node.id %> | Location: <%= node.location %>
                </span>

                <!-- Uptime -->
                <span class="text-gray-400 text-sm md:text-base flex items-center space-x-2">
                  <span class="font-semibold">Uptime:</span>
                  <span id="node-uptime"
                    class="px-3 py-1 bg-neutral-900 border border-[#2a2a2a] rounded text-blue-400 font-mono">
                    Loading...
                  </span>
                </span>

                <span class="text-gray-400 text-sm md:text-base flex items-center space-x-2">
                  <span class="font-semibold">Version:</span>
                  <span class="px-3 py-1 bg-neutral-900 border border-[#2a2a2a] rounded text-blue-400 font-mono">
                    <%= node.fewdata.version %>
                  </span>
                </span>
              </div>

              <!-- Node Status -->
              <span id="node-status"
                class="inline-block text-white px-4 py-2 rounded font-semibold text-lg <%= node.status === 'Online' ? 'bg-green-600' : 'bg-red-600' %>">
                <%= node.status %>
              </span>
            </div>

            <!-- Tab Switcher -->
            <div class="flex flex-wrap gap-4">
              <button onclick="switchTab('stats')"
                class="px-4 py-2 bg-neutral-900 border border-[#2a2a2a] rounded-lg hover:bg-neutral-800"
                id="tab-stats">Node Stats</button>
              <button onclick="switchTab('servers')"
                class="px-4 py-2 bg-neutral-900 border border-[#2a2a2a] rounded-lg hover:bg-neutral-800"
                id="tab-servers">Servers</button>
              <button onclick="switchTab('hardware')"
                class="px-4 py-2 bg-neutral-900 border border-[#2a2a2a] rounded-lg hover:bg-neutral-800"
                id="tab-hardware">Hardware</button>
              <button onclick="switchTab('config')"
                class="px-4 py-2 bg-neutral-900 border border-[#2a2a2a] rounded-lg hover:bg-neutral-800"
                id="tab-config">Configuration</button>
              <button onclick="switchTab('allocations')"
                class="px-4 py-2 bg-neutral-900 border border-[#2a2a2a] rounded-lg hover:bg-neutral-800"
                id="tab-allocations">Allocations</button>
            </div>
            <!-- Node Stats Section -->
            <div id="tab-content-stats" class="space-y-6">
              <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- CPU -->
                <div class="<%= theme.buttonColor %> rounded-xl p-6 shadow-lg border border-[#2a2a2a]">
                  <h2 class="text-xl font-semibold text-white mb-4">CPU Usage (%)</h2>
                  <canvas id="cpuChart" class="w-full h-64"></canvas>
                </div>

                <!-- RAM -->
                <div class="<%= theme.buttonColor %> rounded-xl p-6 shadow-lg border border-[#2a2a2a]">
                  <h2 class="text-xl font-semibold text-white mb-4">RAM Usage (MB)</h2>
                  <canvas id="ramChart" class="w-full h-64"></canvas>
                </div>

                <!-- Disk -->
                <div class="<%= theme.buttonColor %> rounded-xl p-6 shadow-lg border border-[#2a2a2a]">
                  <h2 class="text-xl font-semibold text-white mb-4">Disk Usage (MB)</h2>
                  <canvas id="diskChart" class="w-full h-64"></canvas>
                </div>
              </div>
            </div>

            <!-- Hardware Section -->
            <div id="tab-content-hardware" class="hidden space-y-6">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- RAM -->
                <div
                  class="<%= theme.buttonColor %> rounded-xl p-6 shadow-lg border border-[#2a2a2a] flex flex-col items-center justify-center">
                  <h2 class="text-xl font-semibold text-white mb-4">Node RAM</h2>
                  <p class="text-4xl font-bold text-gray-300">
                    <%= node.ram %> GB
                  </p>
                  <p class="text-gray-400 mt-1 text-sm">Total RAM</p>
                </div>

                <!-- Cores -->
                <div
                  class="<%= theme.buttonColor %> rounded-xl p-6 shadow-lg border border-[#2a2a2a] flex flex-col items-center justify-center">
                  <h2 class="text-xl font-semibold text-white mb-4">Node Cores</h2>
                  <p class="text-4xl font-bold text-gray-300">
                    <%= node.cores %>
                  </p>
                  <p class="text-gray-400 mt-1 text-sm">CPU Cores</p>
                </div>
                <div
                  class="<%= theme.buttonColor %> rounded-xl p-6 shadow-lg border border-[#2a2a2a] flex flex-col items-center justify-center">
                  <h2 class="text-xl font-semibold text-white mb-4">Node Hardware</h2>
                  <p class="text-2xl font-bold text-gray-300">
                    <%= node.fewdata.os %>
                  </p>
                </div>

                <!-- Cores -->
                <div
                  class="<%= theme.buttonColor %> rounded-xl p-6 shadow-lg border border-[#2a2a2a] flex flex-col items-center justify-center">
                  <h2 class="text-xl font-semibold text-white mb-4">Node Version</h2>
                  <p class="text-4xl font-bold text-gray-300">
                    <%= node.fewdata.version %>
                  </p>
                  <span id="lts_ver" class="text-gray-400 mt-1 text-sm">Loading...</span>
                </div>
              </div>
            </div>

            <!-- Configuration Section -->
            <div id="tab-content-config" class="hidden space-y-6">
              <div class="<%= theme.buttonColor %> rounded-xl p-6 shadow-lg border border-[#2a2a2a]">
                <h2 class="text-xl font-semibold text-white mb-4">Node Configuration</h2>

                <!-- Note -->
                <p class="text-gray-400 mb-4">
                  Put this file in the daemon directory with file name <span
                    class="bg-neutral-800 px-1 rounded-md">config.json</span>
                </p>

                <!-- Config Display -->
                <pre id="configContent"
                  class="bg-neutral-900 p-4 rounded-lg text-green-400 text-sm overflow-x-auto h-auto"></pre>
                <p class="text-gray-400 mt-3">
                  Or use initialize command
                </p>

                <!-- Initialization Command Button -->
                <button onclick="openInitComd(`<%= node.id %>`)"
                  class="px-4 py-2 mt-4 bg-blue-600 hover:bg-blue-500 text-white rounded-lg">
                  Initialization Command
                </button>
              </div>
            </div>
            <!-- Allocations Section -->
            <div id="tab-content-allocations" class="hidden space-y-6">
              <div class="<%= theme.buttonColor %> rounded-xl p-6 shadow-lg border border-[#2a2a2a]">
                <h2 class="text-xl font-semibold text-white mb-4">Allocations</h2>

                <!-- Allocations Table -->
                <table id="allocationsTable" class="w-full text-left text-gray-300 mb-6">
                  <thead>
                    <tr class="border-b border-[#2a2a2a]">
                      <th class="py-2">Port</th>
                      <th class="py-2">Domain</th>
                      <th class="py-2">IP</th>
                      <th class="py-2">Used?</th>
                    </tr>
                  </thead>
                  <tbody id="allocationsBody">
                    <% if (node.allocations && node.allocations.length> 0) { %>
                      <% node.allocations.forEach((alloc, index)=> { %>
                        <tr class="border-b border-[#2a2a2a] allocation-row">
                          <td class="py-2 font-mono">
                            <%= alloc.allocation_port %>
                          </td>
                          <td class="py-2">
                            <%= alloc.domain || "-" %>
                          </td>
                          <td class="py-2">
                            <%= alloc.ip || "-" %>
                          </td>
                        <td class="py-2">
                          <% if (alloc.isBeingUsed) { %>
                            <span
                              class="px-3 py-1 rounded-lg bg-green-600 text-white text-sm font-medium transition">Yes</span>
                            <% } else { %>
                               <span
                              class="px-3 py-1 rounded-lg bg-red-600 text-white text-sm font-medium transition">No</span>
                              <% } %>
                        </td>
                        </tr>
                        <% }) %>
                          <% } else { %>
                            <tr>
                              <td colspan="4" class="py-4 text-center text-gray-500">No allocations yet.</td>
                            </tr>
                            <% } %>
                  </tbody>
                </table>

                <!-- Pagination Controls -->
                <div id="paginationControls" class="flex justify-center gap-2 mt-4"></div>

                <!-- Add Allocations Form -->
                <form action="/admin/nodes/<%= node.id %>/allocations/add" method="POST" class="space-y-4">
                  <div>
                    <label class="block text-sm mb-1">Port or Range (e.g. 3000 or 3000-3200)</label>
                    <input type="text" name="portRange" required
                      class="w-full bg-neutral-900 border border-[#2a2a2a] rounded-lg px-3 py-2 text-gray-200" />
                  </div>

                  <div>
                    <label class="block text-sm mb-1">Domain</label>
                    <input type="text" name="domain"
                      class="w-full bg-neutral-900 border border-[#2a2a2a] rounded-lg px-3 py-2 text-gray-200" />
                  </div>

                  <div>
                    <label class="block text-sm mb-1">IP</label>
                    <input type="text" name="ip"
                      class="w-full bg-neutral-900 border border-[#2a2a2a] rounded-lg px-3 py-2 text-gray-200" />
                  </div>

                  <button type="submit" class="px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded-lg">Add
                    Allocation(s)</button>
                </form>
              </div>
            </div>
            <script>
              document.addEventListener("DOMContentLoaded", () => {
                const rows = document.querySelectorAll(".allocation-row");
                const rowsPerPage = 10; // allocations per page
                const totalPages = Math.ceil(rows.length / rowsPerPage);
                const paginationControls = document.getElementById("paginationControls");

                function renderPagination(currentPage) {
                  paginationControls.innerHTML = "";

                  function createButton(page, text = null, disabled = false) {
                    const btn = document.createElement("button");
                    btn.innerText = text || page;
                    btn.disabled = disabled;
                    btn.className =
                      "px-3 py-1 rounded-lg border border-[#2a2a2a] " +
                      (page === currentPage
                        ? "bg-blue-600 text-white"
                        : "bg-neutral-900 text-gray-300 hover:bg-neutral-800");
                    if (!disabled) btn.onclick = () => showPage(page);
                    paginationControls.appendChild(btn);
                  }

                  // Always show "Page 1"
                  createButton(1);

                  // If currentPage > 4, show ellipsis
                  if (currentPage > 4) {
                    const ellipsis = document.createElement("span");
                    ellipsis.innerText = "...";
                    ellipsis.className = "px-2 text-gray-400";
                    paginationControls.appendChild(ellipsis);
                  }

                  // Show middle pages around currentPage
                  const start = Math.max(2, currentPage - 2);
                  const end = Math.min(totalPages - 1, currentPage + 2);

                  for (let i = start; i <= end; i++) {
                    createButton(i);
                  }

                  // If currentPage < totalPages - 3, show ellipsis
                  if (currentPage < totalPages - 3) {
                    const ellipsis = document.createElement("span");
                    ellipsis.innerText = "...";
                    ellipsis.className = "px-2 text-gray-400";
                    paginationControls.appendChild(ellipsis);
                  }

                  // Always show last page if > 1
                  if (totalPages > 1) {
                    createButton(totalPages);
                  }
                }

                function showPage(page) {
                  rows.forEach((row, i) => {
                    row.style.display =
                      i >= (page - 1) * rowsPerPage && i < page * rowsPerPage ? "" : "none";
                  });
                  renderPagination(page);
                }

                if (totalPages > 1) {
                  showPage(1);
                }
              });
            </script>
            <!-- Servers Section -->
            <div id="tab-content-servers" class="hidden space-y-4">
              <div class="<%= theme.buttonColor %> rounded-xl p-6 shadow-lg border border-[#2a2a2a]">
                <h2 class="text-xl font-semibold text-white mb-4">Servers on this Node</h2>
                <table class="w-full text-left text-gray-300">
                  <thead>
                    <tr class="border-b border-[#2a2a2a]">
                      <th class="py-2">Name</th>
                      <th class="py-2">Container ID</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if (servers && servers.length> 0) { %>
                      <% servers.forEach(server=> { %>
                        <tr class="border-b border-[#2a2a2a]">
                          <td class="py-2">
                            <%= server.name %>
                          </td>
                          <td class="py-2 font-mono">
                            <%= server.containerId %>
                          </td>
                          <td class="py-2">
                            <button onclick="window.location.href='/vps/<%= server.containerId %>'"
                              class="px-3 py-1 rounded-lg bg-green-600 hover:bg-green-700 text-white text-sm font-medium transition">
                              Manage
                            </button>
                          </td>
                        </tr>
                        <% }) %>
                          <% } else { %>
                            <tr>
                              <td colspan="2" class="py-4 text-center text-gray-500">No servers assigned to this node.
                              </td>
                            </tr>
                            <% } %>
                  </tbody>
                </table>
              </div>
            </div>

          </main>
          <!-- Init Command Modal -->
          <div id="initCommandModal"
            class="hidden fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
            <div class="<%= theme.buttonColor %> rounded-2xl shadow-lg p-6 w-full max-w-lg border border-[#2a2a2a]">
              <h2 class="text-xl font-semibold text-white mb-4">Initialization Command</h2>
              <p class="text-gray-400 mb-3">Run this command on your node server:</p>

              <pre id="initCommandText"
                class="bg-neutral-900 p-3 rounded-lg text-green-400 text-sm overflow-x-auto"></pre>

              <div class="flex justify-end space-x-3 mt-5">
                <button onclick="closeInitComd()" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg">
                  Close
                </button>
                <button onclick="copyInitComd()" class="px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded-lg">
                  Copy
                </button>
              </div>
            </div>
          </div>
      </div>

      <!-- Charts + Tabs -->
      <script>
        const labels = Array(20).fill('');
        const cpuChart = new Chart(document.getElementById('cpuChart'), {
          type: 'line',
          data: { labels, datasets: [{ label: 'CPU %', data: Array(20).fill(0), borderColor: 'rgb(34,197,94)', backgroundColor: 'rgba(34,197,94,0.2)', tension: 0.3 }] },
          options: { animation: false, responsive: true, scales: { y: { beginAtZero: true } } }
        });

        const ramChart = new Chart(document.getElementById('ramChart'), {
          type: 'line',
          data: { labels, datasets: [{ label: 'RAM MB', data: Array(20).fill(0), borderColor: 'rgb(59,130,246)', backgroundColor: 'rgba(59,130,246,0.2)', tension: 0.3 }] },
          options: { animation: false, responsive: true, scales: { y: { beginAtZero: true } } }
        });

        const diskChart = new Chart(document.getElementById('diskChart'), {
          type: 'line',
          data: { labels, datasets: [{ label: 'Disk MB', data: Array(20).fill(0), borderColor: 'rgb(245,158,11)', backgroundColor: 'rgba(245,158,11,0.2)', tension: 0.3 }] },
          options: { animation: false, responsive: true, scales: { y: { beginAtZero: true } } }
        });

        async function fetchNodeUsage() {
          try {
            const res = await fetch(`/admin/node/<%= node.id %>/docker-usage`);
            const data = await res.json();
            if (!data.success) return;
            const usage = data.usage;

            function pushData(chart, value) {
              chart.data.datasets[0].data.push(value);
              chart.data.datasets[0].data.shift();
              chart.update();
            }

            pushData(cpuChart, usage.totalCPU ?? 0);
            pushData(ramChart, usage.totalMemoryUsedMB ?? 0);
            pushData(diskChart, usage.totalDiskMB ?? 0);

            if (usage.uptime) {
              document.getElementById("node-uptime").textContent =
                typeof usage.uptime === "object"
                  ? `${usage.uptime.days}d ${usage.uptime.hours}h ${usage.uptime.minutes}m`
                  : usage.uptime;
            }
          } catch (err) {
            console.error("Failed to fetch Docker usage:", err);
          }
        }

        fetchNodeUsage();
        setInterval(fetchNodeUsage, 5000);

        function switchTab(tab) {
          ["stats", "servers", "hardware", "config", "allocations"].forEach(t => {
            const content = document.getElementById("tab-content-" + t);
            const button = document.getElementById("tab-" + t);
            if (content) content.classList.add("hidden");
            if (button) button.classList.remove("bg-neutral-800");
          });

          const activeContent = document.getElementById("tab-content-" + tab);
          const activeButton = document.getElementById("tab-" + tab);
          if (activeContent) activeContent.classList.remove("hidden");
          if (activeButton) activeButton.classList.add("bg-neutral-800");
        }


        switchTab('stats');
        async function loadConfig() {
          const fullUrl = `${window.location.protocol}//${window.location.host}`;
          const config = `{
 "token": "<%= node.token %>",
 "ploxora": "${fullUrl}"
}`
          document.getElementById('configContent').textContent = config
        }

        loadConfig()
        function closeInitComd() {
          document.getElementById("initCommandModal").classList.add("hidden");
        }
        function copyInitComd() {
          const text = document.getElementById("initCommandText").textContent;
          navigator.clipboard.writeText(text).then(() => {
            alert("Copied to clipboard!");
          });
        }
        async function openInitComd(nodeId) {
          try {
            const res = await fetch(`/admin/node/${nodeId}/data`);
            const data = await res.json();

            if (!data.success) return alert("Failed to fetch node info");

            const node = data.node;
            const fullUrl = `${window.location.protocol}//${window.location.host}`;
            const cmd = `npm run initialize -- --key ${node.token} --ploxora ${fullUrl}`;

            document.getElementById("initCommandText").textContent = cmd;
            document.getElementById("initCommandModal").classList.remove("hidden");
          } catch (err) {
            console.error("Init command error:", err);
            alert("Could not load init command:", err);
          }
        }
        async function getltsdaemonver() {
          try {
            const res = await fetch("https://ma4z.pages.dev/repo/version_library.json");

            if (!res.ok) {
              console.error("Sorry I can't fetch daemon latest version, maybe I f**ked up?");
              document.getElementById("lts_ver").value = "Error fetching version";
              return;
            }

            const response = await res.json();
            const latestVersion = response["hydren:stable"]?.ploxoradaemon?.versions?.latest;

            document.getElementById("lts_ver").textContent = "Latest Version: " + latestVersion || "N/A";
          } catch (err) {
            console.error("Error fetching daemon latest version:", err);
            document.getElementById("lts_ver").value = "Error fetching version";
          }
        }

        getltsdaemonver();
      </script>
      <script>
        (function () {
          const pre = document.getElementById('configContent');
          if (!pre || pre.tagName !== 'PRE') return;

          function syntaxHighlight(json) {
            // Escape HTML
            json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            // Highlight
            return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|\d+)/g, function (match) {
              let cls = 'text-neutral-950';
              if (/^"/.test(match)) {
                cls = /:$/.test(match) ? 'text-blue-700 font-bold' : 'text-green-700';
              } else if (/true|false/.test(match)) {
                cls = 'text-purple-700';
              } else if (/null/.test(match)) {
                cls = 'text-red-700';
              } else {
                cls = 'text-orange-700';
              }
              return `<span class="${cls}">${match}</span>`;
            });
          }

          try {
            const jsonText = pre.innerText;
            const json = JSON.stringify(JSON.parse(jsonText), null, 2);
            pre.innerHTML = syntaxHighlight(json);
            pre.style.whiteSpace = 'pre';
            pre.style.fontFamily = 'monospace';
            pre.style.padding = '0.5rem';
            pre.style.overflow = 'auto';
          } catch (e) {
            pre.innerText = 'Invalid JSON';
            console.error('Invalid JSON:', e);
          }
        })();
      </script>
      <script>lucide.createIcons();</script>
  </body>

</html>