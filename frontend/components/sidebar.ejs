<!-- Sidebar -->
<aside id="sidebar"
  class="fixed md:static inset-y-0 left-0 w-64 bg-neutral-950 p-6 flex flex-col transform -translate-x-full md:translate-x-0 transition-transform duration-300 z-40 border border-neutral-900">

  <div class="mb-8 flex justify-center items-center gap-3">
    <img src="/uploads/logo.png" alt="Ploxora Logo" class="h-10 w-auto">
    <h1 class="text-xl font-bold text-white"><%= name %></h1>
  </div>

  <!-- Divider -->
  <hr class="border-neutral-900 mb-4">
<div class="relative w-full">
  <button id="userMenuButton" type="button"
    class="transition flex items-center gap-3 w-full px-4 py-2 text-left rounded-xl bg-[#0d0d0d] hover:bg-neutral-900 text-white">
    <img src="<%= user.profilePicture %>" alt="User" class="rounded-full h-8 w-8 border border-neutral-700">
    <span class="truncate"><%= user.username %></span>
    <i id="userMenuChevron" data-lucide="chevron-right" class="ml-auto w-4 h-4 transition-transform"></i>
  </button>

  <div id="userMenu"
       class="absolute top-1/2 left-[calc(100%+0.5rem)] -translate-y-1/2 w-56
              bg-neutral-900 border border-neutral-800 rounded-xl shadow-lg z-50
              transition-all duration-200 ease-out
              opacity-0 translate-x-2 scale-95 pointer-events-none invisible">
    <div class="px-4 py-3 text-sm text-gray-300 border-b border-neutral-800">
      <p class="font-medium truncate"><%= user.username %></p>
      <p class="text-gray-500 text-xs truncate"><%= user.email %></p>
    </div>
    <ul class="py-2 text-white text-sm">
      <li><a href="/settings" class="block px-4 py-2 hover:bg-neutral-800">Settings</a></li>
      <li><a href="/logout" class="block px-4 py-2 hover:bg-neutral-800">Logout</a></li>
    </ul>
  </div>
</div>

  <!-- Divider -->
  <hr class="border-neutral-900 my-4">

  <nav class="space-y-3">
    <a href="/dashboard"
       class="flex items-center gap-3 px-4 py-2 rounded-xl bg-neutral-950 text-white transition border border-[#2a2a2a] hover:border-neutral-600">
      <i data-lucide="layout-dashboard" class="w-5 h-5"></i> Dashboard
    </a>

    <a href="/settings"
       class="flex items-center gap-3 px-4 py-2 rounded-xl bg-neutral-950 text-white transition border border-[#2a2a2a] hover:border-neutral-600">
      <i data-lucide="settings" class="w-5 h-5"></i> Settings
    </a>

    <% addons.forEach(a => { %>
      <% if (a.status === "enabled" && a.sidebar && a.sidebar.length > 0) { %>
        <% a.sidebar.forEach(s => { %>
          <% if (s.for === "user") { %>
            <a href="<%= s.path %>"
               class="flex items-center gap-3 px-4 py-2 rounded-xl bg-neutral-950 text-white transition border border-[#2a2a2a] hover:border-neutral-600">
              <i data-lucide="<%= s.icon || 'puzzle' %>" class="w-5 h-5"></i>
              <%= s.text || a.name %>
            </a>
          <% } %>
        <% }) %>
      <% } %>
    <% }) %>

    <% if (user.admin) { %>
      <a href="/admin/overview"
         class="flex items-center gap-3 px-4 py-2 rounded-xl bg-neutral-950 text-white transition border border-[#2a2a2a] hover:border-neutral-600">
        <i data-lucide="user-star" class="w-5 h-5"></i> Admin
      </a>
    <% } %>
  </nav>

  <div class="mt-auto pt-6 border-t border-neutral-900">
    <span class="text-xs text-gray-500">&copy; 2025 Ploxora</span>
  </div>
</aside>

<script>
  const sidebar = document.getElementById("sidebar");
  const toggle = document.getElementById("sidebarToggle");
  if (toggle) {
    toggle.addEventListener("click", () => {
      sidebar.classList.toggle("-translate-x-full");
    });
  }
</script>
<script>
  const userMenuButton = document.getElementById("userMenuButton");
  const userMenu = document.getElementById("userMenu");
  const userMenuChevron = document.getElementById("userMenuChevron");

  function openMenu() {
    userMenu.classList.remove("opacity-0","translate-x-2","scale-95","pointer-events-none","invisible");
    userMenuChevron && userMenuChevron.classList.add("rotate-90");
  }
  function closeMenu() {
    userMenu.classList.add("opacity-0","translate-x-2","scale-95","pointer-events-none","invisible");
    userMenuChevron && userMenuChevron.classList.remove("rotate-90");
  }
  function isOpen() {
    return !userMenu.classList.contains("invisible");
  }

  if (userMenuButton) {
    userMenuButton.addEventListener("click", (e) => {
      e.stopPropagation();
      isOpen() ? closeMenu() : openMenu();
    });
  }

  document.addEventListener("click", (e) => {
    if (isOpen() && !userMenu.contains(e.target) && !userMenuButton.contains(e.target)) {
      closeMenu();
    }
  });

  // Optional: on small screens, fall back to opening UNDER the button
  const mq = window.matchMedia("(max-width: 767px)");
  function applyMobilePosition() {
    if (mq.matches) {
      userMenu.style.left = "0";
      userMenu.style.top = "100%";
      userMenu.style.transform = "translateY(0)"; // base; transitions still apply via classes
    } else {
      userMenu.style.left = "calc(100% + 0.5rem)";
      userMenu.style.top = "50%";
      userMenu.style.transform = "translateY(-50%)";
    }
  }
  applyMobilePosition();
  mq.addEventListener("change", applyMobilePosition);
</script>
<div id="popup-container"
     class="fixed bottom-4 right-4 z-50 flex flex-col items-end space-y-2">
</div>
<script>
function showPopup(type = "warn", title, description) {
  if (!title || !description) {
    return `u forgot to add title and description so u should use like showPopup("error/success/warn", "Example", "Woah this is insane example");`;
  }

  const colors = {
    success: "bg-green-500 text-white border-green-600",
    error: "bg-red-500 text-white border-red-600",
    warn: "bg-yellow-500 text-black border-yellow-600"
  };

  const li = document.createElement("li");
  li.setAttribute("role", "status");
  li.setAttribute("aria-live", "off");
  li.setAttribute("aria-atomic", "true");
  li.tabIndex = 0;

  li.className = `
    group pointer-events-auto relative flex w-full max-w-sm items-center justify-between
    space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg
    transform transition-all duration-500 ease-in-out w-96
    opacity-0 translate-x-10
    ${colors[type] || colors.warn}
  `;

  li.innerHTML = `
    <div class="grid gap-1">
      <div class="text-sm font-semibold [&+div]:text-xs">${title}</div>
      <div class="text-sm opacity-90">${description}</div>
    </div>
    <button type="button" class="absolute right-1 top-1 rounded-md p-1 text-white/70 hover:text-white focus:outline-none">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none"
           stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M18 6 6 18"></path>
        <path d="m6 6 12 12"></path>
      </svg>
    </button>
  `;

  // Append to container
  const container = document.getElementById("popup-container");
  container.appendChild(li);

  // Initial animate-pulse (500ms)
  li.classList.add("animate-pulse");
  setTimeout(() => li.classList.remove("animate-pulse"), 500);

  // Show animation
  requestAnimationFrame(() => {
    li.classList.remove("opacity-0", "translate-x-10");
    li.classList.add("opacity-100", "translate-x-0");
  });

  // Close button
  li.querySelector("button").addEventListener("click", () => closePopup(li));

  // Auto close after 5s
  setTimeout(() => closePopup(li), 5000);
}

function closePopup(el) {
  el.classList.remove("opacity-100", "translate-x-0");
  el.classList.add("opacity-0", "translate-x-10");
  setTimeout(() => el.remove(), 500); // wait for transition
}
</script>